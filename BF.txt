//BOUNDARY FILLING ALGORITHM FOR ALL POLYGONS

#include<GL/glut.h>
#include<vector>
#include<iostream>

#define SCREEN_HEIGHT 480

using namespace std;

vector<Point> polygon_points;

int count=0;
int poly_ct=0;
bool flag=false;

class Point
{
    public:
        float x;
        float y;
};



void display()
{
    glColor3f(0,1,1);
    glFlush();
}

void init()
{
    glClearColor(0,0,0,1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,640,0,480);
}

void boundary_fill(int x, int y, float* fill_color, float *b_color)
{
    float curr_color[3];
    glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,curr_color);

    if ( (curr_color[0] != b_color[0] || curr_color[1]!=b_color[1] || curr_color[2]!=b_color[2]) &&
        (curr_color[0] !=fill_color[0] || curr_color[1]!=fill_color[1] || curr_color[2]!=fill_color[2]) )
        {

            glColor3f(fill_color[0],fill_color[1],fill_color[2]);
            glBegin(GL_POINTS);
                glVertex2i(x,y);
            glEnd();
            glFlush();
            boundary_fill(x-1,y,fill_color, b_color);
            boundary_fill(x+1, y, fill_color, b_color);
            boundary_fill(x,y+1,fill_color, b_color);
            boundary_fill(x,y-1,fill_color,b_color);
        }

}
void mouse_handler(int btn, int state, int x, int y)
{
    if(btn==GLUT_LEFT && state==GLUT_DOWN)
    {
        if(!flag)
        {
            y=SCREEN_HEIGHT-y;
            Point new_point;
            new_point.x=x;
            new_point.y=y;
            cout<<"Coordinate : { "<<x<<" , "<<y<<" } "<<endl;
            count++;
            polygon_points.push_back(new_point);

        }
        if(flag)
        {
            float bCol[] = {0,1,1}; //boundary color
            float color[] = {1,0,0};
            y=SCREEN_HEIGHT-y;
            boundary_fill(x,y, color, bCol);
        } 

    }

    if(btn==GLUT_RIGHT_BUTTON && state==GLUT_DOWN)
    {
        int i;
        flag=true;
        glColor3f(0,1,1);
        glBegin(GL_LINE_LOOP);
            for(i=0;i<polygon_points.size();i++)
            {
                glVertex2f(polygon_points[i].x,polygon_points[i].y);
            }
        glEnd();
        glFlush();

    }
   
}

int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowPosition(100,200);
    glutInitWindowSize(640,480);
    glutCreateWindow("Boundary fill");
    glutDisplayFunc(display);
    glutMouseFunc(mouse_handler);
    init();
    glutMainLoop();
}
