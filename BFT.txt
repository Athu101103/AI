#include <bits/stdc++.h>
#include <iostream>
#include <GL/glut.h>
#include<windows.h>

#define SCREEN_HT 480

using namespace std;

vector<pair<double, double> > polygonCoords;
int polygonCoordCount = 0;

float fillCol[3] = {0.0,1.0,0.0};
float borderCol[3] = {1.0,0.0,0.0}; //Setting border color of polygon to red by default

void display() {
   glClearColor(1.0,1.0,1.0, 1.0);
   glFlush();
}

void boundaryFill(int x,int y,float borderColor[3]) {
    float interiorColor[3];
    glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,interiorColor);

    if( (interiorColor[0]!=borderColor[0] || interiorColor[1]!=borderColor[1] || interiorColor[2]!=borderColor[2]) && (interiorColor[0]!=fillCol[0] || interiorColor[1]!=fillCol[1] || interiorColor[2]!=fillCol[2]))
    {
        glColor3f(fillCol[0], fillCol[1], fillCol[2]);
        glBegin(GL_POINTS);
            glVertex2f(x,y);
        glEnd();
        glFlush();

        boundaryFill(x+1,y,borderColor);
        boundaryFill(x-1,y,borderColor);
        boundaryFill(x,y+1,borderColor);
        boundaryFill(x,y-1,borderColor);
    }
}

void plotPolygon(){
    int i;
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_LINE_LOOP);
        for(i=0; i<polygonCoordCount; i++)
            glVertex2f(polygonCoords[i].first, polygonCoords[i].second);
    glEnd();
    glFlush();
}

bool polygonPlotted = false;
void mouseHandler(int button, int state, int x, int y) {
    y = SCREEN_HT - y;

    if(button==GLUT_LEFT && state==GLUT_DOWN){
        if (!polygonPlotted){
            glColor3f(1.0, 0.0, 0.0);
            glBegin(GL_POINTS);
                glVertex2f(x,y);
            glEnd();
            glFlush();

            polygonCoords.push_back(make_pair(x,y));
            polygonCoordCount += 1;
        }
        else
            boundaryFill(x, y, borderCol);
    }
    else if(button==GLUT_RIGHT_BUTTON && state==GLUT_DOWN){
        if (!polygonPlotted){
            plotPolygon();
            polygonPlotted = true;
        }
    }
}

void myInit() {
    glClearColor(1,1,1,1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,640.0,0.0,480.0);
}

int main(int argc, char** argv) {
    glutInit(&argc,argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(640,480);
    glutCreateWindow("Boundary-Fill-Recursive");
    glutDisplayFunc(display);
    myInit();
    glutMouseFunc(mouseHandler);
    glutMainLoop();
    return 0;
}
