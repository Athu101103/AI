// Flood-fill Polygon

/* How to use:-
    1. Left click to plot polygon
    2. Right click once to show the polygon
    3. Left click on a seed pixel to start filling
*/

#include <bits/stdc++.h>
#include <iostream>
#include <GL/glut.h>
#include<windows.h>

#define SCREEN_HT 480
#define bgRed 1.0
#define bgGreen 1.0
#define bgBlue 1.0

using namespace std;

vector<pair<double, double> > polygonCoords;
int polygonCoordCount = 0;

float fillCol[3] = {0.078,1.0,0.0}; //Fill color

void display()
{
    glClearColor(bgRed, bgGreen,bgBlue, 1.0);
    glFlush();
}

void floodfill(int x,int y,float oldcolor[3],float newcolor[3])
{
    float color[3];
    glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,color);

    if(color[0]==oldcolor[0] && color[1]==oldcolor[1] && color[2]==oldcolor[2])
    {
        glColor3f(newcolor[0], newcolor[1], newcolor[2]);
        glBegin(GL_POINTS);
            glVertex2f(x,y);
        glEnd();
        glFlush();
        floodfill(x+1,y,oldcolor,newcolor);
        floodfill(x-1,y,oldcolor,newcolor);
        floodfill(x,y+1,oldcolor,newcolor);
        floodfill(x,y-1,oldcolor,newcolor);
        floodfill(x+1, y+1, oldcolor, newcolor);
        floodfill(x-1,y-1,oldcolor,newcolor);
        floodfill(x+1,y-1,oldcolor,newcolor);
        floodfill(x-1,y+1,oldcolor,newcolor);
     }
}

void plotPolygon(){
    int i;
    glColor3f(1.0, 0.0, 0.0);
    glPolygonMode(GL_FRONT_AND_BACK, GL_LINES);
    glBegin(GL_POLYGON);
        for(i=0; i<polygonCoordCount; i++)
            glVertex2f(polygonCoords[i].first, polygonCoords[i].second);
    glEnd();
    glFlush();
}

bool polygonPlotted = false;

void mouseHandler(int button, int state, int x, int y) {
    y = SCREEN_HT - y;

    if(button==GLUT_LEFT && state == GLUT_DOWN){
        if(!polygonPlotted){
            glColor3f(1.0,0.0,0.0);
            glBegin(GL_POINTS);
                glVertex2f(x,y);
            glEnd();
            glFlush();

            polygonCoords.push_back(make_pair(x, y));
            polygonCoordCount += 1;
        }
        else{ //Filling
            float interior_color[3];
            glReadPixels(x,y,1.0,1.0,GL_RGB,GL_FLOAT,interior_color);
            floodfill(x, y, interior_color, fillCol);
        }
    }

    else if(button==GLUT_RIGHT_BUTTON && state == GLUT_DOWN) {
        plotPolygon();
        polygonPlotted = true;
    }
}

void myInit() {
    glClearColor(1,1,1,1);
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, 640.0, 0.0, 480.0);
}

int main(int argc, char** argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(640,480);
    glutInitWindowPosition(0,0);
    glutCreateWindow("Flood-Fill-Recursive");
    glutDisplayFunc(display);
    myInit();
    glutMouseFunc(mouseHandler);
    glutMainLoop();
    return 0;
}
